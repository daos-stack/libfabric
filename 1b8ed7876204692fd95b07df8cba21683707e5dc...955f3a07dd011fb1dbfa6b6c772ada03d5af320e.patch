diff --git a/configure.ac b/configure.ac
index 7f30ba3..97f14bb 100644
--- a/configure.ac
+++ b/configure.ac
@@ -487,7 +487,7 @@ FI_CHECK_PACKAGE([cuda],
 		 [], [])
 
 CPPFLAGS="$CPPFLAGS $cuda_CPPFLAGS"
-LDFLAGS="$LD_FLAGS $cuda_LDFLAGS"
+LDFLAGS="$LDFLAGS $cuda_LDFLAGS"
 LIBS="$LIBS $cuda_LIBS"
 
 dnl Provider-specific checks
diff --git a/prov/rxm/src/rxm_ep.c b/prov/rxm/src/rxm_ep.c
index ff09245..6fbe628 100644
--- a/prov/rxm/src/rxm_ep.c
+++ b/prov/rxm/src/rxm_ep.c
@@ -712,29 +712,6 @@ static int rxm_handle_unexp_sar(struct rxm_recv_queue *recv_queue,
 
 }
 
-static int rxm_check_unexp_recv(struct rxm_ep *rxm_ep,
-				struct rxm_recv_entry *recv_entry)
-{
-	struct rxm_rx_buf *rx_buf;
-
-	/* TODO: handle multi-recv */
-	rx_buf = rxm_get_unexp_msg(&rxm_ep->recv_queue, recv_entry->addr, 0,  0);
-	if (!rx_buf) {
-		dlist_insert_tail(&recv_entry->entry,
-				  &rxm_ep->recv_queue.recv_list);
-		return FI_SUCCESS;
-	}
-
-	dlist_remove(&rx_buf->unexp_msg.entry);
-	rx_buf->recv_entry = recv_entry;
-
-	if (rx_buf->pkt.ctrl_hdr.type != rxm_ctrl_seg)
-		return rxm_cq_handle_rx_buf(rx_buf);
-	else
-		return rxm_handle_unexp_sar(&rxm_ep->recv_queue, recv_entry,
-					    rx_buf);
-}
-
 static int rxm_ep_discard_recv(struct rxm_ep *rxm_ep, struct rxm_rx_buf *rx_buf,
 			       void *context)
 {
@@ -820,7 +797,7 @@ rxm_ep_post_recv(struct rxm_ep *rxm_ep, const struct iovec *iov,
 		 void *context, uint64_t op_flags)
 {
 	struct rxm_recv_entry *recv_entry;
-	ssize_t ret;
+	struct rxm_rx_buf *rx_buf;
 
 	assert(count <= rxm_ep->rxm_info->rx_attr->iov_limit);
 
@@ -830,8 +807,22 @@ rxm_ep_post_recv(struct rxm_ep *rxm_ep, const struct iovec *iov,
 	if (!recv_entry)
 		return -FI_EAGAIN;
 
-	ret = rxm_check_unexp_recv(rxm_ep, recv_entry);
-	return ret;
+	rx_buf = rxm_get_unexp_msg(&rxm_ep->recv_queue, recv_entry->addr, 0,  0);
+	if (!rx_buf) {
+		dlist_insert_tail(&recv_entry->entry,
+				  &rxm_ep->recv_queue.recv_list);
+		return FI_SUCCESS;
+	}
+
+	/* TODO: handle multi-recv */
+	dlist_remove(&rx_buf->unexp_msg.entry);
+	rx_buf->recv_entry = recv_entry;
+
+	if (rx_buf->pkt.ctrl_hdr.type != rxm_ctrl_seg)
+		return rxm_cq_handle_rx_buf(rx_buf);
+	else
+		return rxm_handle_unexp_sar(&rxm_ep->recv_queue, recv_entry,
+					    rx_buf);
 }
 
 static ssize_t
@@ -1726,11 +1717,23 @@ static struct fi_ops_msg rxm_ops_msg_thread_unsafe = {
 	.injectdata = rxm_ep_injectdata_fast,
 };
 
-static int rxm_check_unexp_trecv(struct rxm_ep *rxm_ep,
-				 struct rxm_recv_entry *recv_entry)
+static ssize_t
+rxm_ep_post_trecv(struct rxm_ep *rxm_ep, const struct iovec *iov,
+		 void **desc, size_t count, fi_addr_t src_addr,
+		 uint64_t tag, uint64_t ignore, void *context,
+		 uint64_t op_flags)
 {
+	struct rxm_recv_entry *recv_entry;
 	struct rxm_rx_buf *rx_buf;
 
+	assert(count <= rxm_ep->rxm_info->rx_attr->iov_limit);
+
+	recv_entry = rxm_recv_entry_get(rxm_ep, iov, desc, count, src_addr,
+					tag, ignore, context, op_flags,
+					&rxm_ep->trecv_queue);
+	if (!recv_entry)
+		return -FI_EAGAIN;
+
 	rx_buf = rxm_get_unexp_msg(&rxm_ep->trecv_queue, recv_entry->addr,
 				   recv_entry->tag, recv_entry->ignore);
 	if (!rx_buf) {
@@ -1750,27 +1753,6 @@ static int rxm_check_unexp_trecv(struct rxm_ep *rxm_ep,
 }
 
 static ssize_t
-rxm_ep_post_trecv(struct rxm_ep *rxm_ep, const struct iovec *iov,
-		 void **desc, size_t count, fi_addr_t src_addr,
-		 uint64_t tag, uint64_t ignore, void *context,
-		 uint64_t op_flags)
-{
-	struct rxm_recv_entry *recv_entry;
-	ssize_t ret;
-
-	assert(count <= rxm_ep->rxm_info->rx_attr->iov_limit);
-
-	recv_entry = rxm_recv_entry_get(rxm_ep, iov, desc, count, src_addr,
-					tag, ignore, context, op_flags,
-					&rxm_ep->trecv_queue);
-	if (!recv_entry)
-		return -FI_EAGAIN;
-
-	ret = rxm_check_unexp_trecv(rxm_ep, recv_entry);
-	return ret;
-}
-
-static ssize_t
 rxm_ep_trecv_common(struct rxm_ep *rxm_ep, const struct iovec *iov,
 		   void **desc, size_t count, fi_addr_t src_addr,
 		   uint64_t tag, uint64_t ignore, void *context,
diff --git a/prov/tcp/src/tcpx.h b/prov/tcp/src/tcpx.h
index a6a9375..ed3f748 100644
--- a/prov/tcp/src/tcpx.h
+++ b/prov/tcp/src/tcpx.h
@@ -161,7 +161,7 @@ struct tcpx_cq_data_hdr {
 			 TCPX_IOV_LIMIT +			\
 			 TCPX_MAX_INJECT_SZ)
 
-struct tcpx_rx_detect {
+struct tcpx_cur_rx_msg {
 	union {
 		struct tcpx_base_hdr	base_hdr;
 		uint8_t		       	max_hdr[TCPX_MAX_HDR_SZ];
@@ -192,7 +192,7 @@ struct stage_buf {
 struct tcpx_ep {
 	struct util_ep		util_ep;
 	SOCKET			conn_fd;
-	struct tcpx_rx_detect	rx_detect;
+	struct tcpx_cur_rx_msg	cur_rx_msg;
 	struct tcpx_xfer_entry	*cur_rx_entry;
 	tcpx_rx_process_fn_t 	cur_rx_proc_fn;
 	struct dlist_entry	ep_entry;
@@ -285,7 +285,7 @@ void tcpx_cq_report_error(struct util_cq *cq,
 int tcpx_recv_msg_data(struct tcpx_xfer_entry *recv_entry);
 int tcpx_send_msg(struct tcpx_xfer_entry *tx_entry);
 int tcpx_comm_recv_hdr(SOCKET sock, struct stage_buf *sbuf,
-		        struct tcpx_rx_detect *rx_detect);
+		        struct tcpx_cur_rx_msg *cur_rx_msg);
 int tcpx_read_to_buffer(SOCKET sock, struct stage_buf *stage_buf);
 
 struct tcpx_xfer_entry *tcpx_xfer_entry_alloc(struct tcpx_cq *cq,
diff --git a/prov/tcp/src/tcpx_comm.c b/prov/tcp/src/tcpx_comm.c
index f6e1387..6c2018b 100644
--- a/prov/tcp/src/tcpx_comm.c
+++ b/prov/tcp/src/tcpx_comm.c
@@ -74,14 +74,14 @@ static ssize_t tcpx_read_from_buffer(struct stage_buf *sbuf,
 }
 
 static int tcpx_recv_hdr(SOCKET sock, struct stage_buf *sbuf,
-			  struct tcpx_rx_detect *rx_detect)
+			  struct tcpx_cur_rx_msg *cur_rx_msg)
 {
 	void *rem_buf;
 	size_t rem_len;
 	ssize_t bytes_recvd;
 
-	rem_buf = (uint8_t *) &rx_detect->hdr + rx_detect->done_len;
-	rem_len = rx_detect->hdr_len - rx_detect->done_len;
+	rem_buf = (uint8_t *) &cur_rx_msg->hdr + cur_rx_msg->done_len;
+	rem_len = cur_rx_msg->hdr_len - cur_rx_msg->done_len;
 
 	if (sbuf->len != sbuf->off)
 		bytes_recvd = tcpx_read_from_buffer(sbuf, rem_buf, rem_len);
@@ -94,28 +94,28 @@ static int tcpx_recv_hdr(SOCKET sock, struct stage_buf *sbuf,
 }
 
 int tcpx_comm_recv_hdr(SOCKET sock, struct stage_buf *sbuf,
-		        struct tcpx_rx_detect *rx_detect)
+		        struct tcpx_cur_rx_msg *cur_rx_msg)
 {
 	ssize_t bytes_recvd;
-	bytes_recvd = tcpx_recv_hdr(sock, sbuf, rx_detect);
+	bytes_recvd = tcpx_recv_hdr(sock, sbuf, cur_rx_msg);
 	if (bytes_recvd < 0)
 		return bytes_recvd;
-	rx_detect->done_len += bytes_recvd;
+	cur_rx_msg->done_len += bytes_recvd;
 
-	if (rx_detect->done_len == sizeof(rx_detect->hdr.base_hdr)) {
-		rx_detect->hdr_len = (size_t) rx_detect->hdr.base_hdr.payload_off;
+	if (cur_rx_msg->done_len == sizeof(cur_rx_msg->hdr.base_hdr)) {
+		cur_rx_msg->hdr_len = (size_t) cur_rx_msg->hdr.base_hdr.payload_off;
 
-		if (rx_detect->hdr_len > rx_detect->done_len) {
-			bytes_recvd = tcpx_recv_hdr(sock, sbuf, rx_detect);
+		if (cur_rx_msg->hdr_len > cur_rx_msg->done_len) {
+			bytes_recvd = tcpx_recv_hdr(sock, sbuf, cur_rx_msg);
 			if (bytes_recvd < 0)
 				return bytes_recvd;
-			rx_detect->done_len += bytes_recvd;
-			return (rx_detect->done_len == rx_detect->hdr_len) ?
+			cur_rx_msg->done_len += bytes_recvd;
+			return (cur_rx_msg->done_len == cur_rx_msg->hdr_len) ?
 				FI_SUCCESS : -FI_EAGAIN;
 		}
 	}
 
-	return (rx_detect->done_len == rx_detect->hdr_len) ?
+	return (cur_rx_msg->done_len == cur_rx_msg->hdr_len) ?
 		FI_SUCCESS : -FI_EAGAIN;
 }
 
diff --git a/prov/tcp/src/tcpx_conn_mgr.c b/prov/tcp/src/tcpx_conn_mgr.c
index ef11d3b..6f04563 100644
--- a/prov/tcp/src/tcpx_conn_mgr.c
+++ b/prov/tcp/src/tcpx_conn_mgr.c
@@ -105,15 +105,18 @@ static int tx_cm_data(SOCKET fd, uint8_t type, struct tcpx_cm_context *cm_ctx)
 
 	ret = ofi_send_socket(fd, &hdr, sizeof(hdr), MSG_NOSIGNAL);
 	if (ret != sizeof(hdr))
-		return ofi_sockerr() ? -ofi_sockerr() : -FI_EIO;
+		goto err;
 
 	if (cm_ctx->cm_data_sz) {
 		ret = ofi_send_socket(fd, cm_ctx->cm_data,
 				      cm_ctx->cm_data_sz, MSG_NOSIGNAL);
 		if ((size_t) ret != cm_ctx->cm_data_sz)
-			return ofi_sockerr() ? -ofi_sockerr() : -FI_EIO;
+			goto err;
 	}
+
 	return FI_SUCCESS;
+err:
+	return ofi_sockerr() ? -ofi_sockerr() : -FI_EIO;
 }
 
 static int tcpx_ep_enable_xfers(struct tcpx_ep *ep)
@@ -122,18 +125,17 @@ static int tcpx_ep_enable_xfers(struct tcpx_ep *ep)
 
 	fastlock_acquire(&ep->lock);
 	if (ep->cm_state != TCPX_EP_CONNECTING) {
-		fastlock_release(&ep->lock);
 		FI_WARN(&tcpx_prov, FI_LOG_EP_CTRL,
 			"ep is in invalid state\n");
-		return -FI_EINVAL;
+		ret = -FI_EINVAL;
+		goto unlock;
 	}
 	ep->progress_func = tcpx_ep_progress;
 	ret = fi_fd_nonblock(ep->conn_fd);
 	if (ret) {
-		fastlock_release(&ep->lock);
 		FI_WARN(&tcpx_prov, FI_LOG_EP_CTRL,
 			"failed to set socket to nonblocking\n");
-		return ret;
+		goto unlock;
 	}
 	ep->cm_state = TCPX_EP_CONNECTED;
 	fastlock_release(&ep->lock);
@@ -145,6 +147,9 @@ static int tcpx_ep_enable_xfers(struct tcpx_ep *ep)
 				      NULL);
 	}
 	return ret;
+unlock:
+	fastlock_release(&ep->lock);
+	return ret;
 }
 
 static int proc_conn_resp(struct tcpx_cm_context *cm_ctx,
diff --git a/prov/tcp/src/tcpx_ep.c b/prov/tcp/src/tcpx_ep.c
index 36f094f..ff16680 100644
--- a/prov/tcp/src/tcpx_ep.c
+++ b/prov/tcp/src/tcpx_ep.c
@@ -548,8 +548,8 @@ int tcpx_endpoint(struct fid_domain *domain, struct fi_info *info,
 	slist_init(&ep->rma_read_queue);
 	slist_init(&ep->tx_rsp_pend_queue);
 
-	ep->rx_detect.done_len = 0;
-	ep->rx_detect.hdr_len = sizeof(ep->rx_detect.hdr.base_hdr);
+	ep->cur_rx_msg.done_len = 0;
+	ep->cur_rx_msg.hdr_len = sizeof(ep->cur_rx_msg.hdr.base_hdr);
 	ep->min_multi_recv_size = TCPX_MIN_MULTI_RECV;
 
 	*ep_fid = &ep->util_ep.ep_fid;
@@ -563,7 +563,7 @@ int tcpx_endpoint(struct fid_domain *domain, struct fi_info *info,
 	ep->get_rx_entry[ofi_op_tagged] = tcpx_get_rx_entry_op_invalid;
 	ep->get_rx_entry[ofi_op_read_req] = tcpx_get_rx_entry_op_read_req;
 	ep->get_rx_entry[ofi_op_read_rsp] = tcpx_get_rx_entry_op_read_rsp;
-	ep->get_rx_entry[ofi_op_write] =tcpx_get_rx_entry_op_write;
+	ep->get_rx_entry[ofi_op_write] = tcpx_get_rx_entry_op_write;
 	return 0;
 err3:
 	ofi_close_socket(ep->conn_fd);
diff --git a/prov/tcp/src/tcpx_progress.c b/prov/tcp/src/tcpx_progress.c
index 8e75b47..66d891f 100644
--- a/prov/tcp/src/tcpx_progress.c
+++ b/prov/tcp/src/tcpx_progress.c
@@ -396,11 +396,11 @@ int tcpx_get_rx_entry_op_invalid(struct tcpx_ep *tcpx_ep)
 }
 
 static inline void
-tcpx_rx_detect_init(struct tcpx_rx_detect *rx_detect)
+tcpx_rx_detect_init(struct tcpx_cur_rx_msg *cur_rx_msg)
 
 {
-	rx_detect->hdr_len = sizeof(rx_detect->hdr.base_hdr);
-	rx_detect->done_len = 0;
+	cur_rx_msg->hdr_len = sizeof(cur_rx_msg->hdr.base_hdr);
+	cur_rx_msg->done_len = 0;
 }
 
 int tcpx_get_rx_entry_op_msg(struct tcpx_ep *tcpx_ep)
@@ -408,11 +408,11 @@ int tcpx_get_rx_entry_op_msg(struct tcpx_ep *tcpx_ep)
 	struct tcpx_xfer_entry *rx_entry;
 	struct tcpx_xfer_entry *tx_entry;
 	struct tcpx_cq *tcpx_cq;
-	struct tcpx_rx_detect *rx_detect = &tcpx_ep->rx_detect;
+	struct tcpx_cur_rx_msg *cur_rx_msg = &tcpx_ep->cur_rx_msg;
 	size_t msg_len;
 	int ret;
 
-	if (rx_detect->hdr.base_hdr.op_data == TCPX_OP_MSG_RESP) {
+	if (cur_rx_msg->hdr.base_hdr.op_data == TCPX_OP_MSG_RESP) {
 		assert(!slist_empty(&tcpx_ep->tx_rsp_pend_queue));
 		tx_entry = container_of(tcpx_ep->tx_rsp_pend_queue.head,
 					struct tcpx_xfer_entry, entry);
@@ -423,12 +423,12 @@ int tcpx_get_rx_entry_op_msg(struct tcpx_ep *tcpx_ep)
 
 		slist_remove_head(&tx_entry->ep->tx_rsp_pend_queue);
 		tcpx_xfer_entry_release(tcpx_cq, tx_entry);
-		tcpx_rx_detect_init(rx_detect);
+		tcpx_rx_detect_init(cur_rx_msg);
 		return -FI_EAGAIN;
 	}
 
-	msg_len = (tcpx_ep->rx_detect.hdr.base_hdr.size -
-		   tcpx_ep->rx_detect.hdr.base_hdr.payload_off);
+	msg_len = (tcpx_ep->cur_rx_msg.hdr.base_hdr.size -
+		   tcpx_ep->cur_rx_msg.hdr.base_hdr.payload_off);
 
 	if (tcpx_ep->srx_ctx){
 		rx_entry = tcpx_srx_next_xfer_entry(tcpx_ep->srx_ctx,
@@ -449,8 +449,8 @@ int tcpx_get_rx_entry_op_msg(struct tcpx_ep *tcpx_ep)
 		slist_remove_head(&tcpx_ep->rx_queue);
 	}
 
-	memcpy(&rx_entry->hdr, &tcpx_ep->rx_detect.hdr,
-	       (size_t) tcpx_ep->rx_detect.hdr.base_hdr.payload_off);
+	memcpy(&rx_entry->hdr, &tcpx_ep->cur_rx_msg.hdr,
+	       (size_t) tcpx_ep->cur_rx_msg.hdr.base_hdr.payload_off);
 	rx_entry->ep = tcpx_ep;
 	rx_entry->hdr.base_hdr.op_data = TCPX_OP_MSG_RECV;
 	rx_entry->mrecv_msg_start = rx_entry->iov[0].iov_base;
@@ -466,10 +466,10 @@ int tcpx_get_rx_entry_op_msg(struct tcpx_ep *tcpx_ep)
 	}
 
 	tcpx_ep->cur_rx_proc_fn = process_rx_entry;
-	if (rx_detect->hdr.base_hdr.flags & OFI_REMOTE_CQ_DATA)
+	if (cur_rx_msg->hdr.base_hdr.flags & OFI_REMOTE_CQ_DATA)
 		rx_entry->flags |= FI_REMOTE_CQ_DATA;
 
-	tcpx_rx_detect_init(rx_detect);
+	tcpx_rx_detect_init(cur_rx_msg);
 	tcpx_ep->cur_rx_entry = rx_entry;
 	return FI_SUCCESS;
 }
@@ -491,12 +491,12 @@ int tcpx_get_rx_entry_op_read_req(struct tcpx_ep *tcpx_ep)
 	if (!rx_entry)
 		return -FI_EAGAIN;
 
-	memcpy(&rx_entry->hdr, &tcpx_ep->rx_detect.hdr,
-	       (size_t) tcpx_ep->rx_detect.hdr.base_hdr.payload_off);
+	memcpy(&rx_entry->hdr, &tcpx_ep->cur_rx_msg.hdr,
+	       (size_t) tcpx_ep->cur_rx_msg.hdr.base_hdr.payload_off);
 	rx_entry->hdr.base_hdr.op_data = TCPX_OP_REMOTE_READ;
 	rx_entry->ep = tcpx_ep;
 	rx_entry->rem_len = (rx_entry->hdr.base_hdr.size -
-			      tcpx_ep->rx_detect.done_len);
+			      tcpx_ep->cur_rx_msg.done_len);
 
 	ret = tcpx_validate_rx_rma_data(rx_entry, FI_REMOTE_READ);
 	if (ret) {
@@ -506,7 +506,7 @@ int tcpx_get_rx_entry_op_read_req(struct tcpx_ep *tcpx_ep)
 		return ret;
 	}
 
-	tcpx_rx_detect_init(&tcpx_ep->rx_detect);
+	tcpx_rx_detect_init(&tcpx_ep->cur_rx_msg);
 	tcpx_ep->cur_rx_entry = rx_entry;
 	tcpx_ep->cur_rx_proc_fn = tcpx_prepare_rx_remote_read_resp;
 	return FI_SUCCESS;
@@ -526,16 +526,16 @@ int tcpx_get_rx_entry_op_write(struct tcpx_ep *tcpx_ep)
 		return -FI_EAGAIN;
 
 	rx_entry->flags = 0;
-	if (tcpx_ep->rx_detect.hdr.base_hdr.flags & OFI_REMOTE_CQ_DATA)
+	if (tcpx_ep->cur_rx_msg.hdr.base_hdr.flags & OFI_REMOTE_CQ_DATA)
 		rx_entry->flags = (FI_COMPLETION |
 				   FI_REMOTE_CQ_DATA | FI_REMOTE_WRITE);
 
-	memcpy(&rx_entry->hdr, &tcpx_ep->rx_detect.hdr,
-	       (size_t) tcpx_ep->rx_detect.hdr.base_hdr.payload_off);
+	memcpy(&rx_entry->hdr, &tcpx_ep->cur_rx_msg.hdr,
+	       (size_t) tcpx_ep->cur_rx_msg.hdr.base_hdr.payload_off);
 	rx_entry->hdr.base_hdr.op_data = TCPX_OP_REMOTE_WRITE;
 	rx_entry->ep = tcpx_ep;
 	rx_entry->rem_len = (rx_entry->hdr.base_hdr.size -
-			      tcpx_ep->rx_detect.done_len);
+			      tcpx_ep->cur_rx_msg.done_len);
 
 	ret = tcpx_validate_rx_rma_data(rx_entry, FI_REMOTE_WRITE);
 	if (ret) {
@@ -546,7 +546,7 @@ int tcpx_get_rx_entry_op_write(struct tcpx_ep *tcpx_ep)
 	}
 
 	tcpx_copy_rma_iov_to_msg_iov(rx_entry);
-	tcpx_rx_detect_init(&tcpx_ep->rx_detect);
+	tcpx_rx_detect_init(&tcpx_ep->cur_rx_msg);
 	tcpx_ep->cur_rx_entry = rx_entry;
 	tcpx_ep->cur_rx_proc_fn = process_rx_remote_write_entry;
 	return FI_SUCCESS;
@@ -565,13 +565,13 @@ int tcpx_get_rx_entry_op_read_rsp(struct tcpx_ep *tcpx_ep)
 	rx_entry = container_of(entry, struct tcpx_xfer_entry,
 				entry);
 
-	memcpy(&rx_entry->hdr, &tcpx_ep->rx_detect.hdr,
-	       (size_t) tcpx_ep->rx_detect.hdr.base_hdr.payload_off);
+	memcpy(&rx_entry->hdr, &tcpx_ep->cur_rx_msg.hdr,
+	       (size_t) tcpx_ep->cur_rx_msg.hdr.base_hdr.payload_off);
 	rx_entry->hdr.base_hdr.op_data = TCPX_OP_READ_RSP;
 	rx_entry->rem_len = (rx_entry->hdr.base_hdr.size -
-			     tcpx_ep->rx_detect.done_len);
+			     tcpx_ep->cur_rx_msg.done_len);
 
-	tcpx_rx_detect_init(&tcpx_ep->rx_detect);
+	tcpx_rx_detect_init(&tcpx_ep->cur_rx_msg);
 	tcpx_ep->cur_rx_entry = rx_entry;
 	tcpx_ep->cur_rx_proc_fn = process_rx_read_entry;
 	return FI_SUCCESS;
@@ -582,14 +582,14 @@ static inline int tcpx_get_next_rx_hdr(struct tcpx_ep *ep)
 	int ret;
 
 	/* hdr already read from socket in previous call */
-	if (ep->rx_detect.hdr_len == ep->rx_detect.done_len)
+	if (ep->cur_rx_msg.hdr_len == ep->cur_rx_msg.done_len)
 		return FI_SUCCESS;
 
-	ret = tcpx_comm_recv_hdr(ep->conn_fd, &ep->stage_buf, &ep->rx_detect);
+	ret = tcpx_comm_recv_hdr(ep->conn_fd, &ep->stage_buf, &ep->cur_rx_msg);
 	if (ret)
 		return ret;
 
-	ep->hdr_bswap(&ep->rx_detect.hdr.base_hdr);
+	ep->hdr_bswap(&ep->cur_rx_msg.hdr.base_hdr);
 	return FI_SUCCESS;
 }
 
@@ -609,7 +609,7 @@ static void tcpx_process_rx_msg(struct tcpx_ep *ep)
 			if (ret)
 				goto err;
 
-			ret = ep->get_rx_entry[ep->rx_detect.hdr.base_hdr.op](ep);
+			ret = ep->get_rx_entry[ep->cur_rx_msg.hdr.base_hdr.op](ep);
 			if (ret)
 				goto err;
 		}
diff --git a/src/fabric.c b/src/fabric.c
index bf6da75..e13a0ab 100644
--- a/src/fabric.c
+++ b/src/fabric.c
@@ -952,6 +952,7 @@ int DEFAULT_SYMVER_PRE(fi_getinfo)(uint32_t version, const char *node,
 			continue;
 		}
 
+		cur = NULL;
 		ret = prov->provider->getinfo(version, node, service, flags,
 					      hints, &cur);
 		if (ret) {
